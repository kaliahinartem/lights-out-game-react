{"ast":null,"code":"import _slicedToArray from \"/Users/artemkaliahin/Study/js/react/lights-out-game-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/artemkaliahin/Study/js/react/lights-out-game-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/artemkaliahin/Study/js/react/lights-out-game-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/artemkaliahin/Study/js/react/lights-out-game-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/artemkaliahin/Study/js/react/lights-out-game-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/artemkaliahin/Study/js/react/lights-out-game-react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/artemkaliahin/Study/js/react/lights-out-game-react/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var i = 0; i < this.props.ncols; i++) {\n        board.push(Array.from({\n          length: this.props.nrows\n        }, function () {\n          return Math.random() > 0.5;\n        }));\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      var hasWon = this.state.hasWon;\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x);\n      flipCell(y, x + 1);\n      flipCell(y, x - 1);\n\n      if (board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      })) {\n        hasWon = true;\n      }\n\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.hasWon) {\n        return React.createElement(\"div\", {\n          className: \"Board-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"neon-orange\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, \"You\"), React.createElement(\"span\", {\n          className: \"neon-blue\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, \"Win!\"));\n      }\n\n      var tblBoard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push(React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          }));\n        };\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          _loop(x);\n        }\n\n        tblBoard.push(React.createElement(\"tr\", {\n          key: y,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, row));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Board-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"neon-orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Lights\"), React.createElement(\"div\", {\n        className: \"neon-blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Out\")), React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, tblBoard)));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  ncols: 5,\n  nrows: 5\n};\nexport default Board;","map":{"version":3,"sources":["/Users/artemkaliahin/Study/js/react/lights-out-game-react/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","i","ncols","push","Array","from","length","nrows","Math","random","coord","split","map","Number","y","x","flipCell","every","row","cell","setState","tblBoard","flipCellsAround","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    ncols: 5,\n    nrows: 5\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    for (let i = 0; i < this.props.ncols; i++) {\n      board.push(\n          Array.from({length: this.props.nrows}, () => Math.random() > 0.5)\n      );\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    let hasWon = this.state.hasWon;\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x);\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n    flipCell(y, x + 1);\n    flipCell(y, x - 1);\n\n    if (board.every( row => row.every( cell => !cell))) {\n      hasWon = true;\n    }\n\n    this.setState({board: board, hasWon: hasWon});\n  }\n\n\n  render() {\n    if (this.state.hasWon) {\n      return (\n          <div className='Board-title'>\n            <span className=\"neon-orange\">You</span>\n            <span className=\"neon-blue\">Win!</span>\n          </div>\n      )\n    }\n\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n            <Cell\n                key={coord}\n                isLit={this.state.board[y][x]}\n                flipCellsAroundMe={() => this.flipCellsAround(coord)}\n\n            />);\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return(\n\n        <div>\n          <div className='Board-title'>\n            <div className=\"neon-orange\">Lights</div>\n            <div className=\"neon-blue\">Out</div>\n          </div>\n\n          <table className='Board'>\n            <tbody>{tblBoard}</tbody>\n          </table>\n        </div>\n\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}